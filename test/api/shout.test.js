import { jest } from '@jest/globals';
import { randomBytes } from 'crypto';
import Fastify from 'fastify';
import shoutPlugin from '../../api/shout.js';
import { setupDatabase } from '../../db/db.js';

describe('Shout API (core flow)', () => {
    let fastify;
    let lastId, lastDeleteToken;

    beforeAll(async () => {
        fastify = Fastify();
        global.fastify = fastify;
        // Register required plugins as in the real app
        await fastify.register(import('@fastify/cors'), {
            origin: 'http://localhost:3000',
            methods: ['GET', 'POST', 'DELETE', 'OPTIONS']
        });
        await fastify.register(import('@fastify/helmet'), { global: true });
        await fastify.register(import('@fastify/rate-limit'), { max: 5, timeWindow: '1 minute' });
        // Minimal mock DB pool
        const mockPool = {
            connect: jest.fn().mockResolvedValue({
                query: jest.fn().mockImplementation(async (sql, params) => {
                    if (sql.includes('INSERT INTO')) {
                        // Use the id and deleteToken generated by the plugin
                        lastId = params[0];
                        lastDeleteToken = params[4];
                        return { rows: [{ id: lastId, delete_token: lastDeleteToken }], rowCount: 1 };
                    } else if (sql.includes('SELECT')) {
                        return { rows: [{ message: 'encrypted', iv: 'abcdefghijklmnop', salt: null, delete_token: lastDeleteToken }], rowCount: 1 };
                    } else if (sql.includes('DELETE')) {
                        return { rows: [], rowCount: 1 };
                    }
                    return { rows: [] };
                }),
                release: jest.fn()
            })
        };
        fastify.decorate('pg', { pool: mockPool });
        await fastify.register(shoutPlugin);
        await fastify.ready();
    });

    afterAll(async () => {
        await fastify.close();
    });

    test('can create, retrieve, and delete a message', async () => {
        // Create
        const createRes = await fastify.inject({
            method: 'POST',
            url: '/api/shout',
            headers: { 'content-type': 'application/json' },
            payload: { message: 'encrypted', iv: 'abcdefghijklmnop' }
        });
        expect(createRes.statusCode).toBe(200);
        const { id, deleteToken } = JSON.parse(createRes.payload);
        expect(id).toBe(lastId);
        expect(deleteToken).toBe(lastDeleteToken);

        // Retrieve
        const getRes = await fastify.inject({
            method: 'GET',
            url: `/api/shout/${id}/data`
        });
        expect(getRes.statusCode).toBe(200);
        const data = JSON.parse(getRes.payload);
        expect(data.message).toBe('encrypted');
        expect(data.iv).toBe('abcdefghijklmnop');

        // Delete (self-destruct)
        const delRes = await fastify.inject({
            method: 'DELETE',
            url: `/api/shout/${id}`,
            headers: { 'x-delete-token': deleteToken }
        });
        expect(delRes.statusCode).toBe(200);
    });
}); 